|$Id: ibis.4.0.ibisx-base,v 1.61 2004/02/01 07:12:00 al Exp $
| Copyright (C) 2003 Albert Davis
| Author: Albert Davis <aldavis@ieee.org>
|
| This file is part of "Gnucap", the Gnu Circuit Analysis Package
|
| This program is free software; you can redistribute it and/or modify
| it under the terms of the GNU General Public License as published by
| the Free Software Foundation; either version 2, or (at your option)
| any later version.
|
| This program is distributed in the hope that it will be useful,
| but WITHOUT ANY WARRANTY; without even the implied warranty of
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
| GNU General Public License for more details.
|
| You should have received a copy of the GNU General Public License
| along with this program; if not, write to the Free Software
| Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
| 02111-1307, USA.
|------------------------------------------------------------------
|1.0|[File Name] ibis.3.2.ibs
|1.0|[File Rev]  0.02
|1.0||
|1.0|| This file contains a description of Ibis 3.2 in the proposed language.
|1.0|| It serves as proof that the new language is backward compatible,
|1.0|| and provides a base from which extensions can be added.
|1.0|| It would be provided with any implementation.
|1.0||
|3.0||---------------------------------------------------------------------
|3.0|[Define Model] Series (pin1 pin2)
|3.0|node t1, t2, t3
|3.0|scalar C_comp, [Voltage_Range]
|3.0|scalar [Temperature_Range], [R_Series], [L_Series]
|3.0|scalar [Rl_Series], [C_Series], [Lc_Series], [Rc_Series]
|3.0|table  [Series_Current], [Series_MOSFET]
|3.0||fake
|3.0|key V, Vc, Vo, Vds
|3.0|scalar [Series_MOSFET]Vds
|3.0||end fake
|3.0|
|4.0|define VT = .8617087e-4 * ([Temperature_Range]+273.15) || .026
|3.0|capacitor Ccomp    (pin1 pin2)        C = C_comp
|3.0|vsource   Vpur     (0 0)              V = [Voltage_Range] || open
|3.0|
|3.0|resistor  Rseries  (pin1 pin2)        R = [R_Series]  || open
|3.0|inductor  Lseries  (pin1 t1)          L = [L_Series]  || open
|3.0|resistor  RLseries (t1   pin2)        R = [Rl_Series] || short
|3.0|capacitor Cseries  (pin1 t2)          C = [C_Series]  || open
|3.0|inductor  LCseries (t2   t3)          L = [Lc_Series] || short
|3.0|resistor  RCseries (t3   pin2)        R = [Rc_Series] || short
|3.0|resistor  Rsercur  (pin1 pin2)        I = [Series_Current](V) || open
|3.0|vcg       Mosfet   (pin1 pin2 0 pin2) I = [Series_MOSFET](Vc,Vo=Vds) || open
|3.0|[End Define Model]
|3.0||---------------------------------------------------------------------
|3.0|[Define Model] Series_switch (pin1 pin2 control)
|3.0|select (control)
|3.0|  case [Off]
|3.0|    inherit [Model]Series
|3.0|  end case
|3.0|  case [On]
|3.0|    inherit [Model]Series
|3.0|  end case
|3.0|end select
|3.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Base] model_base (pin gnd control enable_pin 
|1.0|			pulldown_ref pullup_ref gnd_clamp_ref power_clamp_ref)
|1.0|scalar [Voltage_Range]
|1.0|scalar [Temperature_Range]
|2.0|scalar [GND_Clamp_Reference], [POWER_Clamp_Reference]
|2.0|scalar [Pullup_Reference], [Pulldown_Reference]
|1.0|scalar C_comp
|4.0|scalar C_comp_pullup, C_comp_pulldown, C_comp_power, C_comp_gnd
|3.0|scalar [TTpower], [TTgnd]
|2.0|scalar Cref, Rref, Vref
|1.0|scalar Vinl, Vinh
|2.0|scalar Vmeas
|1.0|table  [POWER_clamp], [GND_clamp]
|1.0|string Polarity
|1.0|string Enable
|1.0|key    power_on
|1.0||fake
|1.0|key    V
|3.0|table [Model_Spec]
|1.0||end fake
|1.0|
|1.0|if (power_on)
|1.0|  vsource Vpcr (power_clamp_ref gnd) V = 
|2.0|			[POWER_Clamp_Reference] || 
|1.0|			[Voltage_Range]
|1.0|  vsource Vgcr (gnd_clamp_ref gnd)  V = 
|2.0|			[GND_Clamp_Reference] || 
|1.0|			short
|1.0|end if
|1.0|
|1.0|resistor  Rpc    (pin power_clamp_ref)  I = [POWER_clamp](-V)
|1.0|resistor  Rgc    (pin gnd_clamp_ref)    I = [GND_clamp](V) || open
|3.0|
|3.0|define VT = .8617087e-4 * ([Temperature_Range]+273.15) || .026
|3.0|capacitor Cttpwr (pin power_clamp_ref)  
|3.0|                                C = [TTpower] * [POWER_clamp](-V) / VT || open
|3.0|capacitor Cttgnd (pin gnd_clamp_ref)
|3.0|                                C = [TTgnd]   * [GND_clamp](V) / VT    || open
|1.0|capacitor Ccomp  (pin gnd)      C = C_comp || open
|4.0|capacitor Ccomp_pu  (pin pullup_ref)      C = C_comp_pullup   || open
|4.0|capacitor Ccomp_pd  (pin pulldown_ref)    C = C_comp_pulldown || open
|4.0|capacitor Ccomp_pc  (pin power_clamp_ref) C = C_comp_power    || open
|4.0|capacitor Ccomp_gc  (pin gnd_clamp_ref)   C = C_comp_gnd      || open
|3.2|
|3.2||foreach line in [Add_Submodel]
|3.2||  if ($1$ == "Non_Driving")
|3.2||    node $line$.enable
|3.2||    inverter U1 ($line$.enable gnd en) delay=0
|3.2||  else if ($1$ == "All")
|3.2||    node $line$.enable
|3.2||    dsource U2 ($line$.enable gnd) state=1
|3.2||  else if ($1$ == "Driving")
|3.2||    define $line$.enable en
|3.2||  else
|3.2||    error "must be Non_Driving, All, or Driving"
|3.2||  end if
|3.2||  submodel X$line$ (pin gnd control $line$.enable
|3.2||	pulldown_ref pullup_ref gnd_clamp_ref power_clamp_ref) $0$
|3.2||end foreach
|1.0||
|1.0||compatibility: useful only for input, etc.
|1.0|| here because allowed for all
|1.0||trigger ft1i (V(pin) < (
|3.0||	[Model_Spec]Vinl || 
|1.0||	Vinl))
|1.0||trigger ft2i (V(pin) > (
|3.0||	[Model_Spec]Vinh || 
|1.0||	Vinh))
|1.0||
|1.0|[End Define Base]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] Terminator
|2.0|inherit [Base]model_base
|2.0|node t1
|2.0|scalar [Rac], [Cac], [Rpower], [Rgnd]
|2.0|
|2.0|resistor  Rac   (pin t1)                R = [Rac] || short
|2.0|capacitor Cac   (t1  gnd)               C = [Cac] || open
|2.0|resistor  Rpwr  (pin power_clamp_ref)   R = [Rpower] || open
|2.0|resistor  Rgnd  (pin gnd_clamp_ref)     R = [Rgnd] || open
|2.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Model] Input
|1.0|inherit [Base]model_base
|1.0|
|1.0|if (Polarity == "Inverting")
|2.0||  trigger switch_hi (
|3.0||          (V(pin) < [Model_Spec]Pulse_low for ([Model_Spec]Pulse_time || 0)) ||
|2.0||          (V(pin) < (
|3.0||                     [Model_Spec]Vmeas || 
|2.0||                     Vmeas)))
|2.0||  trigger switch_lo (
|3.0||          (V(pin) > [Model_Spec]Pulse_high for ([Model_Spec]Pulse_time || 0)) ||
|2.0||          (V(pin) > (
|3.0||                     [Model_Spec]Vmeas || 
|2.0||                     Vmeas)))
|1.0|else if (Polarity == "Non-Inverting" || !Polarity)
|2.0||  trigger switch_hi (
|3.0||          (V(pin) > [Model_Spec]Pulse_high for ([Model_Spec]Pulse_time || 0)) ||
|2.0||          (V(pin) > (
|3.0||                     [Model_Spec]Vmeas || 
|2.0||                     Vmeas)))
|2.0||  trigger switch_lo (
|3.0||          (V(pin) < [Model_Spec]Pulse_low for ([Model_Spec]Pulse_time || 0)) ||
|2.0||          (V(pin) < (
|3.0||                     [Model_Spec]Vmeas || 
|2.0||                     Vmeas)))
|1.0|else
|1.0||  error "Polarity (if present) must be Inverting or Non-Inverting"
|1.0|end if
|3.0||alarm failure (
|3.0||     V(pin) > [Model_Spec]D_overshoot_high ||
|3.0||     V(pin) < [Model_Spec]D_overshoot_low  ||
|3.0||     V(pin) > [Model_Spec]S_overshoot_high for [Model_Spec]D_overshoot_time ||
|3.0||     V(pin) < [Model_Spec]S_overshoot_low  for [Model_Spec]D_overshoot_time ||
|3.0||     never)
|3.0||fake
|3.0||trigger ft3i (V(pin) < [Model_Spec]Vinl_plus_)
|3.0||trigger ft4i (V(pin) > [Model_Spec]Vinh_plus_)
|3.0||trigger ft5i (V(pin) < [Model_Spec]Vinl_minus_)
|3.0||trigger ft6i (V(pin) > [Model_Spec]Vinh_minus_)
|3.0||end fake
|2.0|export switch_hi, switch_lo, failure
|3.0||*** Keywords not covered: Vinl, Vinh, Vinh+, Vinh-, Vinl+, Vinl-
|3.0||*** Reason: too much typing.  Just more triggers and exports.
|1.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Model] 3-state
|1.0|inherit [Base]model_base
|1.0|table [Pullup], [Pulldown]
|2.0|table [Falling_Waveform], [Rising_Waveform]
|1.0|ramp  [Ramp]
|2.0||fake
|2.0|key T, multi
|1.0|node TF, TR
|2.0|scalar [Falling_Waveform]R_fixture, [Falling_Waveform]R_dut
|2.0|scalar [Falling_Waveform]V_fixture_min, [Falling_Waveform]V_fixture_max
|2.0|scalar [Falling_Waveform]V_fixture, [Falling_Waveform]L_fixture
|2.0|scalar [Falling_Waveform]C_fixture, [Falling_Waveform]L_dut
|2.0|scalar [Falling_Waveform]C_dut
|2.0|scalar [Rising_Waveform]R_fixture, [Rising_Waveform]R_dut
|2.0|scalar [Rising_Waveform]V_fixture_min, [Rising_Waveform]V_fixture_max
|2.0|scalar [Rising_Waveform]V_fixture, [Rising_Waveform]L_fixture
|2.0|scalar [Rising_Waveform]C_fixture, [Rising_Waveform]L_dut
|2.0|scalar [Rising_Waveform]C_dut
|2.0||end fake
|2.0|
|1.0|if (power_on)
|1.0|  vsource Vpur (pullup_ref gnd)   V = 
|2.0|			[Pullup_Reference] || 
|1.0|			[Voltage_Range]
|1.0|  vsource Vpdr (pulldown_ref gnd) V = 
|2.0|			[Pulldown_Reference] || 
|1.0|			short
|1.0|end if
|1.0|
|1.0|node en
|1.0|if (Enable == "Active-Low")
|1.0|  inverter (en 0 enable_pin) delay=0
|1.0|else if (Enable == "Active-High" || !Enable)
|1.0|  vsource (en enable_pin) V=short
|1.0|else
|1.0||  error "Enable (if present) must be Active-Low or Active-High"
|1.0|end if  
|1.0|
|3.0|foreach line in [Driver_Schedule]
|3.0|  node $line$.retrigger
|3.0|  reshape U$0 ($line$.retrigger gnd control gnd) $1$ $2$ $3$ $4$
|3.0||  model X$line$ (pin gnd $line$.retrigger en 
|3.0||	pulldown_ref pullup_ref gnd_clamp_ref power_clamp_ref) $0$
|3.0|else
|1.0||  trigger  TR   (Logic(control) == 1)
|1.0||  trigger  TF   (Logic(control) == 0)
|1.0|  driver Udrv (pin gnd en TF pulldown_ref TR pullup_ref) (
|1.0|        s1 = [Pullup](-V),  s0 = [Pulldown](V),
|2.0|        w10 = [Falling_Waveform](T-TF,multi),
|2.0|        w01 = [Rising_Waveform](T-TR,multi),  
|1.0|	     ramp = [Ramp] )
|3.0|end foreach
|2.0||fake
|2.0||trigger ft1b (V(pin) < (
|3.0||		[Model_Spec]Vmeas || 
|2.0||		Vmeas))
|2.0||trigger ft2b (V(pin) > (
|3.0||		[Model_Spec]Vmeas || 
|2.0||		Vmeas))
|2.0||end fake
|1.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Model] Output
|1.0|inherit [Model]3-state
|1.0|assert (!en)
|1.0||define en pullup_ref
|1.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Model] Open_drain
|1.0|inherit [Model]Output
|1.0|define [Pullup](V) = 0
|1.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] Open_sink
|2.0|inherit [Model]Open_drain
|2.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] Open_source
|2.0|inherit [Model]Output
|2.0|define [Pulldown](V) = 0
|2.0|[End Define Model]
|1.0||---------------------------------------------------------------------
|1.0|[Define Model] I/O
|1.0|inherit [Model]3-state
|1.0|inherit [Model]Input
|1.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] I/O_open_drain
|2.0|inherit [Model]I/O
|2.0|define [Pullup](V) = 0
|2.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] I/O_open_sink
|2.0|inherit [Model]I/O_open_drain
|2.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] I/O_open_source
|2.0|inherit [Model]I/O
|2.0|define [Pulldown](V) = 0
|2.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] Input_ECL
|2.0|inherit [Model]Input
|2.0|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] Output_ECL
|2.0|inherit [Model]Output
|2.0|define [Pulldown](V) = [Pulldown](-V)
|2.0|[End Define Model]
|3.2||---------------------------------------------------------------------
|3.2|[Define Model] 3-state_ECL
|3.2|inherit [Model]3-state
|3.2|define [Pulldown](V) = [Pulldown](-V)
|3.2|[End Define Model]
|2.0||---------------------------------------------------------------------
|2.0|[Define Model] I/O_ECL
|2.0|inherit [Model]I/O
|2.0|define [Pulldown](V) = [Pulldown](-V)
|2.0|[End Define Model]
|3.2||---------------------------------------------------------------------
|3.2|[Define Submodel] Dynamic_clamp (pin gnd control en 
|3.2|			pulldown_ref pullup_ref gnd_clamp_ref power_clamp_ref)
|3.2|node t1 t2
|3.2|table [POWER_clamp], [GND_clamp]
|3.2|table [POWER_Pulse_Table], [GND_Pulse_Table]
|3.2||fake
|3.2|key    V, T
|3.2|node   TR, TF
|3.2|table [Submodel_Spec]
|3.2||end fake
|3.2|
|3.2||trigger  TR     (V(pin) > [Submodel_Spec]V_trigger_r)
|3.2||trigger  TF     (V(pin) < [Submodel_Spec]V_trigger_f)
|3.2|resistor Rpc (pin t1)             I = [POWER_clamp](-V)
|3.2|resistor Rgc (pin t2)             I = [GND_clamp](V)
|3.2|vsource  Vpc (power_clamp_ref t1) V = [POWER_Pulse_Table](T-TR) || short
|3.2|vsource  Vgc (gnd_clamp_ref   t2) V = [GND_Pulse_Table](T-TF)   || short
|3.2|[End Define Submodel]
|3.2||---------------------------------------------------------------------
|3.2|[Define Submodel] Bus_hold (pin gnd control en 
|3.2|			pulldown_ref pullup_ref gnd_clamp_ref power_clamp_ref)
|3.2|table [Pullup], [Pulldown]
|3.2|table [Falling_Waveform], [Rising_Waveform]
|3.2|ramp [Ramp]
|3.2||fake
|3.2|key    V, T, multi
|3.2|node   TR, TF
|3.2|table [Submodel_Spec]
|3.2||end fake
|3.2||trigger  TRraw   (V(pin) > [Submodel_Spec]V_trigger_r)
|3.2||trigger  TFraw   (V(pin) < [Submodel_Spec]V_trigger_f)
|3.2||trigger  TR      (TRraw || TFraw + [Submodel_Spec]Off_delay)
|3.2||trigger  TF      (TFraw || TRraw + [Submodel_Spec]Off_delay)
|3.2|driver Udrv (pin gnd en TF pulldown_ref TR pullup_ref) (
|3.2|        s1 = [Pullup](-V),  s0 = [Pulldown](V),
|3.2|        w10 = [Falling_Waveform](T-TF,multi), ramp = [Ramp],
|3.2|        w01 = [Rising_Waveform](T-TR,multi)  )
|3.2|[End Define Submodel]
|4.0||---------------------------------------------------------------------
|4.0|[Define Component] 3.2 (1 2)
|4.0|resistor R1 (1 2) R=10k
|4.0|[End Define Component]
|1.0||---------------------------------------------------------------------
|1.0|[End]
|1.0||---------------------------------------------------------------------
|1.0||---------------------------------------------------------------------
